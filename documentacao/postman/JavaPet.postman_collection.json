{
	"info": {
		"_postman_id": "b71eb918-6223-4153-a0a8-681eea36fecc",
		"name": "JavaPet",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1524675"
	},
	"item": [
		{
			"name": "PF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Test to check if the response has the correct content type\r",
							"pm.test(\"Response has the correct content type\", function() {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							" \r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nascimento\": \"1960-05-15\",\r\n    \"nome\": \"Bolsonaro\",\r\n    \"tipo\": \"PF\",\r\n    \"CPF\": \"132456464654\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/pf",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"pf"
					]
				}
			},
			"response": []
		},
		{
			"name": "PJ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Test to check if the response has the correct content type\r",
							"pm.test(\"Response has the correct content type\", function() {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							" \r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nascimento\": \"2010-05-15\",\r\n    \"nome\": \"Mulher de Aluguel\",\r\n    \"tipo\": \"PJ\",\r\n    \"CNPJ\": \"564546546\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/pj",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"pj"
					]
				}
			},
			"response": []
		},
		{
			"name": "ANIMAL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Test to check if the response has the correct content type\r",
							"pm.test(\"Response has the correct content type\", function() {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							" \r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"descricao\": \"CAO DA CASA\",\r\n        \"dono\": {\r\n            \"id\": 1\r\n        },\r\n        \"nome\": \"PIT O BULL DOG\",\r\n        \"raca\": \"PITBULL\",\r\n        \"tipo\": \"CACHORRO\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/animal",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"animal"
					]
				}
			},
			"response": []
		},
		{
			"name": "SERVICO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Description is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.descricao).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.animal.id).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Realization is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.realizacao).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"animal\": {\r\n        \"id\": 1\r\n    },\r\n    \"descricao\": \"TOSA NA REGUA\",\r\n    \"realizacao\": \"2023-10-15\",\r\n    \"tipo\": \"TOSA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/servico",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"servico"
					]
				}
			},
			"response": []
		},
		{
			"name": "PF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Test to check if the response has the correct content type\r",
							"pm.test(\"Response has the correct content type\", function() {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an array\", function () {\r",
							"  pm.response.json().forEach(function(item) {\r",
							"    pm.expect(item).to.be.an('object');\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Each object in the response array has the required properties\", function () {\r",
							"  pm.response.json().forEach(function(item) {\r",
							"    pm.expect(item).to.have.property('id');\r",
							"    pm.expect(item).to.have.property('nascimento');\r",
							"    pm.expect(item).to.have.property('nome');\r",
							"    pm.expect(item).to.have.property('tipo');\r",
							"    pm.expect(item).to.have.property('CPF');\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each object in the response array has a valid 'nascimento' date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function (object) {\r",
							"        pm.expect(object.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each object in the response array has a non-empty 'nome' property\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"    responseData.forEach(function (obj) {\r",
							"        pm.expect(obj.nome).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/pf",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"pf"
					]
				}
			},
			"response": []
		},
		{
			"name": "PF/id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Test to check if the response has the correct content type\r",
							"pm.test(\"Response has the correct content type\", function() {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							" \r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/pf/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"pf",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "ANIMAL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an array with at least one element\", function () {\r",
							"  pm.expect(pm.response.json()).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should have at least one element\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each object's 'id' field is a non-negative integer\", function () {\r",
							"    pm.response.json().forEach(function (object) {\r",
							"        pm.expect(object.id).to.be.a('number');\r",
							"        pm.expect(object.id).to.be.at.least(0);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/animal",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"animal"
					]
				}
			},
			"response": []
		},
		{
			"name": "SERVICO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an array with at least one element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData).to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that the 'descricao' field is a non-empty string for each animal object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function (animal) {\r",
							"        pm.expect(animal).to.be.an('object');\r",
							"        pm.expect(animal.descricao).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/servico",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"servico"
					]
				}
			},
			"response": []
		},
		{
			"name": "SERVICO/Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'descricao' field is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.descricao).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'realizacao' field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.realizacao).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/servico/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"servico",
						"1"
					]
				}
			},
			"response": []
		}
	]
}